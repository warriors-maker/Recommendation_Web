package rpc;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.json.JSONException;
import org.json.JSONObject;

import cache.CacheConnectionFactory;
import cache.RedisConnection;
import cache.SingleRedisPool;
import db.DBConnection;
import db.DBConnectionFactory;

@WebServlet("/login")
public class Login extends HttpServlet{
	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		DBConnection connection = DBConnectionFactory.getConnection();
		try {
			HttpSession session = request.getSession(false);

			JSONObject obj = new JSONObject();
			if (session != null) {
				String userId = session.getAttribute("user_id").toString();
				obj.put("status", "OK").put("user_id", userId).put("name", connection.getFullname(userId));	
			} else {
				response.setStatus(403);
				obj.put("status", "Session Invalid");
			}

			RpcHelper.writeJSONObject(response, obj);
		} catch (JSONException e) {
			e.printStackTrace();
		} finally {
			connection.close();
		}

	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		SingleRedisPool redisConn = (SingleRedisPool)CacheConnectionFactory.getConnection();
		redisConn.mockInsert();
		redisConn.mockQuery();
		
		DBConnection connection = DBConnectionFactory.getConnection();
		try {
			JSONObject input = RpcHelper.readJSONObject(request);
			String userId = input.getString("user_id");
			String password = input.getString("password");
			
			boolean exist = connection.verifyRegister(userId);
			
			if (!exist) {
				RpcHelper.writeJSONObject(response, new JSONObject().put("status", "Failure"));
			} else {
				if (connection.verifyLogin(userId, password)) {
					HttpSession session = request.getSession();
					session.setAttribute("user_id", userId);
					session.setMaxInactiveInterval(600);
					RpcHelper.writeJSONObject(response, new JSONObject()
							.put("status", "OK")
							.put("user_id", userId)
							.put("name", connection.getFullname(userId)));
				} else {
					RpcHelper.writeJSONObject(response, new JSONObject().put("status", "Failure"));
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			//connection.close();
		}

	}
}
