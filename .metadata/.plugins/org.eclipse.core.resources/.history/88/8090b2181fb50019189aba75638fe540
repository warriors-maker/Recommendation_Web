package cache;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.redisson.Redisson;
import org.redisson.api.RBucket;
import org.redisson.api.RList;
import org.redisson.api.RedissonClient;
import org.redisson.config.Config;


import entity.Item;


public class SingleRedisPool implements RedisConnection{
	private static RedissonClient redisson;
	
	public static RedissonClient getJedisPool() {
		if (redisson == null) {
			// TODO: May need to tune Parameters later.
			Config config = new Config();
			config.useSingleServer().setAddress("localhost:6379");
			config.useSingleServer().setConnectionPoolSize(100);
			redisson = Redisson.create(config);
		}
		return redisson;
	}

	@Override
	public void invalLikedCache(String userId) {
		// TODO Auto-generated method stub
		redisson.getKeys().delete(userId);
	}

	@Override
	public void setFavoriteItems(String userId,List<Item> items) {
		RList<Item> list = redisson.getList(userId);
		for (Item item : items) {
			list.add(item);
		}
	}

	@Override
	public Set<Item> getFavoriteItems(String userId) {
		// TODO Auto-generated method stub
		RList<Item> list = redisson.getList(userId);
		Set<Item> returnSet = new HashSet();
		for (Item item : list) {
			returnSet.add(item);
		}
		return returnSet;
	}
	
	public void mockInsert() {
		RBucket<String> keyObject = redisson.getBucket("abc");
		keyObject.set("value");
	}
	
	public void mockQuery() {
		RBucket<String> keyObject = redisson.getBucket("abc");
		System.out.println(keyObject.get());
	}
	
	


}
